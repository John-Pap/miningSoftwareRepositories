package cryptoOne;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;

import javax.print.attribute.HashAttributeSet;

public class AssigmentI {

	// Not sure if 2 level of decription????
	public static void exerciseOne() {

		String enctypted = "CRBZQROSPCUEPUNDRKTPF";

		String[] l1 = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S",
				"T", "U", "V", "W", "X", "Y", "Z" };
		String[] l2 = { "M", "V", "H", "T", "K", "N", "L", "W", "Q", "A", "G", "R", "U", "S", "Z", "P", "X", "B", "Y",
				"O", "E", "J", "D", "I", "C", "F" };
		String[] l3 = { "U", "K", "G", "V", "P", "I", "Y", "C", "L", "W", "M", "T", "F", "O", "R", "N", "H", "D", "Z",
				"Q", "B", "E", "S", "X", "A", "J" };

		String[] encryptedTokens = enctypted.split("");
		StringBuilder decrypt = new StringBuilder();

		/* Decripter */
		for (String token : encryptedTokens) {
			boolean exit = false;
			for (int i = 0; i < l3.length; i++) {
				if (l3[i].equals(token)) {
					decrypt.append(l1[i]);
					exit = true;
					break;
				}
			}
		}
		System.out.println("Assigment 1 Answer: " + decrypt.toString());

	}

	public static void excerciseTwo() {

		/*
		 * The following ciphertexts are encrypted with the same key using
		 * Vigen´ere cipher. Write a program to estimate the key length of
		 * Vigen´ere cipher using Kasiski test.
		 */
		String vigenOne = "YVAPGCPCWHXSCJFDKHFZQITBEVYWXOFSSIPSERLHXSRCCCMMVYCGXHJRRCXSFJRDUSFFLT";
		String vigenTwo = "VYCDUJKFSHFOVYCBTHKTYAUFGRIIAFQLEWPCWCBQXRGMCAHDOVLIHTCECPLMYRWIHTCTRDKZCIETIFKDCCNADVPH";

		Map<Integer, Integer> coincidencesRowMap = new TreeMap<>();
		for (int i = 0; i < vigenOne.length(); i++) {
			StringBuilder comparer = new StringBuilder();
			comparer.append(vigenOne.substring(i, vigenOne.length()));
			for (int y = 0; y < comparer.length(); y++) {
				char[] charFromVigen = new char[1];
				char[] charFromComparer = new char[1];
				vigenOne.getChars(y, y, charFromVigen, 0);
				comparer.getChars(y, y, charFromComparer, 0);
				if (charFromVigen[0] == charFromComparer[0]) {
					if (coincidencesRowMap.containsKey(i)) {
						int coincidences = coincidencesRowMap.get(i);
						coincidences++;
						coincidencesRowMap.put(coincidences,i );
					} else {
						coincidencesRowMap.put(1, i);
					}
				}
			}
		}
		//Get The 4 Greater Values
		List<Integer> bigRowsList = new ArrayList<>();
		int maxValues=4;
		int counter=0;
		for (Integer i : coincidencesRowMap.keySet()) {
			if(maxValues<=counter){
				bigRowsList.add(coincidencesRowMap.get(i));
			}
			counter++;
		}
		for(int i = 0; i<bigRowsList.size();i++){
			if(i+1<bigRowsList.size()){
				System.out.println("Output: "+(bigRowsList.get(i)-bigRowsList.get(i+1)));
			}
		}
	}
}